#ifndef __KEXEKEYS_H
#define __KEXEKEYS_H

/* note, not all keys are allowed to be accessed directly from kernel! */

#define XEKEY_CONSOLETYPE_DEVKIT	0x00000001
#define XEKEY_CONSOLETYPE_RETAIL	0x00000002
#define XEIKA_DATA_SIGNATURE		0x4F534947 // 'OSIG'
#define XEIKA_DATA_ODD_VERSION		0x1
#define XEIKA_DATA_VERSION			0x1

typedef enum _XEKEY_OBFUSCATE {
	XEKEY_OBFUSCATE_CONSOLE = 0, // uses XEKEY_CONSOLE_OBFUSCATION_KEY = 0x17
	XEKEY_OBFUSCATE_ROAM = 1, // uses XEKEY_ROAMABLE_OBFUSCATION_KEY = 0x19
} XEKEY_OBFUSCATE;

typedef enum _XEKEY_INDEX {
	XEKEY_MANUFACTURING_MODE = 0x0,
	XEKEY_ALTERNATE_KEY_VAULT = 0x1,
	XEKEY_RESTRICTED_PRIVILEGES_FLAGS = 0x2,
	XEKEY_RESERVED_BYTE3 = 0x3,
	XEKEY_ODD_FEATURES = 0x4,
	XEKEY_ODD_AUTHTYPE = 0x5,
	XEKEY_RESTRICTED_HVEXT_LOADER = 0x6,
	XEKEY_POLICY_FLASH_SIZE = 0x7,
	XEKEY_POLICY_BUILTIN_USBMU_SIZE = 0x8,
	XEKEY_RESERVED_DWORD4 = 0x9,
	XEKEY_RESTRICTED_PRIVILEGES = 0xA,
	XEKEY_RESERVED_QWORD2 = 0xB,
	XEKEY_RESERVED_QWORD3 = 0xC,
	XEKEY_RESERVED_QWORD4 = 0xD,
	XEKEY_RESERVED_KEY1 = 0xE,
	XEKEY_RESERVED_KEY2 = 0xF,
	XEKEY_RESERVED_KEY3 = 0x10,
	XEKEY_RESERVED_KEY4 = 0x11,
	XEKEY_RESERVED_RANDOM_KEY1 = 0x12,
	XEKEY_RESERVED_RANDOM_KEY2 = 0x13,
	XEKEY_CONSOLE_SERIAL_NUMBER = 0x14,
	XEKEY_MOBO_SERIAL_NUMBER = 0x15,
	XEKEY_GAME_REGION = 0x16,
	XEKEY_CONSOLE_OBFUSCATION_KEY = 0x17,
	XEKEY_KEY_OBFUSCATION_KEY = 0x18,
	XEKEY_ROAMABLE_OBFUSCATION_KEY = 0x19,
	XEKEY_DVD_KEY = 0x1A,
	XEKEY_PRIMARY_ACTIVATION_KEY = 0x1B,
	XEKEY_SECONDARY_ACTIVATION_KEY = 0x1C,
	XEKEY_GLOBAL_DEVICE_2DES_KEY1 = 0x1D,
	XEKEY_GLOBAL_DEVICE_2DES_KEY2 = 0x1E,
	XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY1 = 0x1F,
	XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY2 = 0x20,
	XEKEY_WIRED_WEBCAM_MS_2DES_KEY1 = 0x21,
	XEKEY_WIRED_WEBCAM_MS_2DES_KEY2 = 0x22,
	XEKEY_WIRED_CONTROLLER_MS_2DES_KEY1 = 0x23,
	XEKEY_WIRED_CONTROLLER_MS_2DES_KEY2 = 0x24,
	XEKEY_MEMORY_UNIT_MS_2DES_KEY1 = 0x25,
	XEKEY_MEMORY_UNIT_MS_2DES_KEY2 = 0x26,
	XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY1 = 0x27,
	XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY2 = 0x28,
	XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY1 = 0x29,
	XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY2 = 0x2A,
	XEKEY_WIRED_WEBCAM_3P_2DES_KEY1 = 0x2B,
	XEKEY_WIRED_WEBCAM_3P_2DES_KEY2 = 0x2C,
	XEKEY_WIRED_CONTROLLER_3P_2DES_KEY1 = 0x2D,
	XEKEY_WIRED_CONTROLLER_3P_2DES_KEY2 = 0x2E,
	XEKEY_MEMORY_UNIT_3P_2DES_KEY1 = 0x2F,
	XEKEY_MEMORY_UNIT_3P_2DES_KEY2 = 0x30,
	XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY1 = 0x31,
	XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY2 = 0x32,
	XEKEY_CONSOLE_PRIVATE_KEY = 0x33,
	XEKEY_XEIKA_PRIVATE_KEY = 0x34,
	XEKEY_CARDEA_PRIVATE_KEY = 0x35,
	XEKEY_CONSOLE_CERTIFICATE = 0x36,
	XEKEY_XEIKA_CERTIFICATE = 0x37,
	XEKEY_CARDEA_CERTIFICATE = 0x38,
	XEKEY_MAX_KEY_INDEX = 0x39,
	// constant keys
	XEKEY_CONSTANT_PIRS_KEY = 0x39,
	XEKEY_CONSTANT_ALT_MASTER_KEY = 0x3A,
	XEKEY_CONSTANT_ALT_LIVE_KEY = 0x3B,
	XEKEY_CONSTANT_MASTER_KEY = 0x3C,
	XEKEY_CONSTANT_LIVE_KEY = 0x3D,
	XEKEY_CONSTANT_XB1_GREEN_KEY = 0x3E,
	XEKEY_CONSTANT_SATA_DISK_SECURITY_KEY = 0x3F,
	XEKEY_CONSTANT_DEVICE_REVOCATION_KEY = 0x40,
	XEKEY_CONSTANT_XMACS_KEY = 0x41,
	XEKEY_CONSTANT_REVOCATION_LIST_NONCE = 0x42,
	XEKEY_CONSTANT_CROSS_PLATFORM_SYSLINK_KEY = 0x43,
	// special keys
	XEKEY_SPECIAL_KEY_VAULT_SIGNATURE = 0x44,
	XEKEY_SPECIAL_SECROM_DIGEST = 0x45,
	XEKEY_SPECIAL_SECDATA = 0x46,
	XEKEY_SPECIAL_DVD_FIRMWARE_KEY = 0x47,
	XEKEY_SPECIAL_DEBUG_UNLOCK = 0x48,
	XEKEY_SPECIAL_DEBUG_UNLOCK_STATE = 0x49,
	XEKEY_SPECIAL_IMAGE_OBFUSCATION_KEY = 0x4A,
	XEKEY_SPECIAL_DVD_HCRT_OBFUSCATION_KEY = 0x4B,
	XEKEY_SPECIAL_ROAMABLE_OBFUSCATION_KEY = 0x4C,
	XEKEY_SPECIAL_DATA_CENTER_KEY = 0x4D,
	XEKEY_MAX_CONSTANT_INDEX = 0x4E,
	// title keys
	XEKEY_TITLE_KEYS_BASE = 0xE0,
	XEKEY_TITLE_KEYS_LIMIT = 0xE8,
	XEKEY_TITLE_KEYS_RESET = 0xF0,
	// secured keys
	XEKEY_SECURED_DATA_BASE = 0x1000,
	XEKEY_SECURED_DATA_LIMIT = 0x2000,
} XEKEY_INDEX;

typedef enum _XEKEYEX_INDEX {
	XEKEYEX_COUNT = 0xE,
	XEKEYEX_START = 0xFF,
	// video device keys
	XEKEYEX_VIDEO_DEVICE_PUBLIC_KEY = 0x100,
	XEKEYEX_VIDEO_DEVICE_PRIVATE_KEY = 0x101,
	XEKEYEX_VIDEO_DEVICE_CERTIFICATE = 0x102,
	// IPTV keys
	XEKEYEX_IPTV_AV_PRIVATE_KEY = 0x103,
	XEKEYEX_IPTV_KEY_FIRST = 0x103,
	XEKEYEX_IPTV_AUTH_PRIVATE_KEY = 0x104,
	XEKEYEX_IPTV_AV_CERTIFICATE = 0x105,
	XEKEYEX_IPTV_AUTH_CERTIFICATE = 0x106,
	XEKEYEX_IPTV_AV_SERIALIZED_CERTIFICATE = 0x107,
	XEKEYEX_IPTV_AUTH_SERIALIZED_CERTIFICATE = 0x108,
	XEKEYEX_IPTV_KEY_LAST = 0x108,
	// more video device keys??
	XEKEYEX_VIDEO_DEVICE_PR_PUBLIC_KEY_SIGN = 0x109,
	XEKEYEX_VIDEO_DEVICE_PR_PRIVATE_KEY_SIGN = 0x10A,
	XEKEYEX_VIDEO_DEVICE_PR_PUBLIC_KEY_ENCRYPT = 0x10B,
	XEKEYEX_VIDEO_DEVICE_PR_PRIVATE_KEY_ENCRYPT = 0x10C,
	XEKEYEX_VIDEO_DEVICE_PR_CERTIFICATE = 0x10D,
	XEKEYEX_MAX_KEY_INDEX = 0x10E,
} XEKEYEX_INDEX;

typedef struct _XEKEYS_EXEC_HEADER {
	WORD magic; // ((this ^ hvmagic) & 0xF000) must equal 0; (this & 0x0F0F) must equal 0x0D0D
	WORD Build; // 2
	WORD Qfe; // 4
	WORD Flags; // 6
	DWORD Entry; // 8 must be 0x10 aligned and > 0x120, and < Size
	DWORD Size; // 0xC must be 0x10 aligned and > 0x120
	BYTE bNonce[0x10]; // data used to decrypt
} XEKEYS_EXEC_HEADER, *PXEKEYS_EXEC_HEADER;

typedef struct _XEIKA_ODD_DATA { 
	BYTE Version; // 0x0 sz:0x1
	BYTE PhaseLevel; // 0x1 sz:0x1
	BYTE InquiryData[0x24]; // 0x2 sz:0x24
} XEIKA_ODD_DATA, *PXEIKA_ODD_DATA; // size 38
C_ASSERT(sizeof(XEIKA_ODD_DATA) == 0x26);

// this is returned by XEKEY_XEIKA_CERTIFICATE, dev doesn't seem to have osig data
typedef struct _XEIKA_DATA { 
	XECRYPT_RSAPUB_2048 PublicKey; // 0x0 sz:0x110
	DWORD Signature; // 0x110 sz:0x4 typically XEIKA_DATA_SIGNATURE
	WORD Version; // 0x114 sz:0x2
	XEIKA_ODD_DATA OddData; // 0x116 sz:0x26
	BYTE Padding[0x4]; // 0x13C sz:0x4
} XEIKA_DATA, *PXEIKA_DATA; // size 320
C_ASSERT(sizeof(XEIKA_DATA) == 0x140); 

#pragma pack(push, 1)
typedef struct _XEIKA_CERTIFICATE { 
	WORD Size; // 0x0 sz:0x2
	XEIKA_DATA Data; // 0x2 sz:0x140
	BYTE Padding[0x1146]; // 0x142 sz:0x1146
	BYTE Reserved[0x100]; // 0x1288 sz:0x100
} XEIKA_CERTIFICATE, *PXEIKA_CERTIFICATE; // size 5000
C_ASSERT(sizeof(XEIKA_CERTIFICATE) == 0x1388);
#pragma pack(pop)



#endif // __KEXEKEYS_H
